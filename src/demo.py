#!/usr/bin/env python3
"""
Script para demonstrar indiv√≠duos salvos do algoritmo gen√©tico.
Permite visualizar como o melhor agente se comporta no jogo.
"""

import vizdoom as vzd
import numpy as np
import json
import os
import time
import sys
from itertools import product

# Importa fun√ß√µes do main.py
sys.path.append(os.path.dirname(__file__))
try:
    from main import initialize_game, load_individual, list_saved_individuals
except ImportError:
    print("‚ùå Erro: N√£o foi poss√≠vel importar fun√ß√µes do main.py")
    print("Certifique-se de que o arquivo main.py est√° no mesmo diret√≥rio.")
    sys.exit(1)

def demonstrate_individual(individual, actions, num_episodes=3, delay=0.05):
    """
    Demonstra um indiv√≠duo executando no jogo com tela vis√≠vel.
    
    Args:
        individual (dict): Indiv√≠duo a ser demonstrado
        actions (list): Lista de a√ß√µes poss√≠veis
        num_episodes (int): N√∫mero de epis√≥dios para demonstrar
        delay (float): Delay entre a√ß√µes para visualiza√ß√£o
    """
    print(f"\n{'='*60}")
    print(f"üéÆ DEMONSTRA√á√ÉO DO AGENTE GEN√âTICO")
    print(f"Fitness: {individual['fitness']:.2f}")
    print(f"Epis√≥dios: {num_episodes}")
    print(f"Delay entre a√ß√µes: {delay}s")
    print(f"{'='*60}")
    
    # Inicializa jogo com tela vis√≠vel
    print("Inicializando jogo com tela vis√≠vel...")
    game, _ = initialize_game(headless=False)
    
    total_kills = 0
    total_health = 0
    total_ammo = 0
    total_steps = 0
    episodes_completed = 0
    
    for episode in range(num_episodes):
        print(f"\n--- Epis√≥dio {episode + 1}/{num_episodes} ---")
        print("Iniciando epis√≥dio...")
        
        game.new_episode()
        episode_steps = 0
        
        # Executa cada a√ß√£o do genoma
        for action_index in individual["genome"]:
            if game.is_episode_finished():
                break
            
            action_to_perform = actions[action_index]
            game.make_action(action_to_perform)
            episode_steps += 1
            
            # Pausa para visualiza√ß√£o
            time.sleep(delay)
        
        # Coleta estat√≠sticas do epis√≥dio
        kills = game.get_game_variable(vzd.GameVariable.KILLCOUNT)  # type: ignore
        health = game.get_game_variable(vzd.GameVariable.HEALTH)  # type: ignore
        ammo = game.get_game_variable(vzd.GameVariable.SELECTED_WEAPON_AMMO)  # type: ignore
        
        total_kills += kills
        total_health += health
        total_ammo += ammo
        total_steps += episode_steps
        episodes_completed += 1
        
        print(f"Epis√≥dio {episode + 1} finalizado:")
        print(f"  Kills: {kills}")
        print(f"  Health: {health}")
        print(f"  Ammo: {ammo}")
        print(f"  Steps: {episode_steps}")
        
        # Pausa entre epis√≥dios
        if episode < num_episodes - 1:
            print("Pausa de 3 segundos antes do pr√≥ximo epis√≥dio...")
            time.sleep(3)
    
    # Estat√≠sticas finais
    if episodes_completed > 0:
        avg_kills = total_kills / episodes_completed
        avg_health = total_health / episodes_completed
        avg_ammo = total_ammo / episodes_completed
        avg_steps = total_steps / episodes_completed
        
        print(f"\n{'='*60}")
        print(f"üìä ESTAT√çSTICAS FINAIS (m√©dia de {episodes_completed} epis√≥dios):")
        print(f"Kills por epis√≥dio: {avg_kills:.1f}")
        print(f"Health por epis√≥dio: {avg_health:.1f}")
        print(f"Ammo por epis√≥dio: {avg_ammo:.1f}")
        print(f"Steps por epis√≥dio: {avg_steps:.1f}")
        print(f"{'='*60}")
    
    game.close()
    print("Demonstra√ß√£o finalizada!")

def main():
    """Fun√ß√£o principal do script de demonstra√ß√£o."""
    print("üéÆ DEMONSTRADOR DE AGENTES GEN√âTICOS")
    print("="*50)
    print("Este script demonstra agentes treinados pelo algoritmo gen√©tico.")
    print("Execute o treinamento primeiro com: python main.py")
    print("="*50)
    
    # Lista indiv√≠duos salvos
    saved_files = list_saved_individuals()
    
    if not saved_files:
        print("‚ùå Nenhum indiv√≠duo salvo encontrado.")
        print("üìã Execute o treinamento primeiro:")
        print("   python main.py")
        print("\nüìÅ Os indiv√≠duos ser√£o salvos em: saved_individuals/")
        return
    
    # Interface para escolher indiv√≠duo
    print(f"\nEscolha um indiv√≠duo para demonstrar:")
    for i, filepath in enumerate(saved_files):
        try:
            with open(filepath, 'r') as f:
                data = json.load(f)
            fitness = data.get('fitness', 'N/A')
            timestamp = data.get('timestamp', 'N/A')
            filename = os.path.basename(filepath)
            print(f"{i+1}. {filename}")
            print(f"   Fitness: {fitness}")
            print(f"   Data: {timestamp}")
        except Exception as e:
            print(f"{i+1}. {os.path.basename(filepath)} (erro ao ler: {e})")
    
    # Sele√ß√£o do usu√°rio
    try:
        choice = input(f"\nDigite o n√∫mero (1-{len(saved_files)}): ").strip()
        if not choice:
            print("Opera√ß√£o cancelada.")
            return
            
        choice_idx = int(choice) - 1
        if not (0 <= choice_idx < len(saved_files)):
            print("‚ùå Escolha inv√°lida.")
            return
            
        selected_file = saved_files[choice_idx]
        
        # Carrega o indiv√≠duo
        print(f"\nCarregando indiv√≠duo...")
        individual = load_individual(selected_file)
        
        # Configura√ß√µes da demonstra√ß√£o
        print(f"\nConfigura√ß√µes da demonstra√ß√£o:")
        num_episodes_input = input("N√∫mero de epis√≥dios (padr√£o: 3): ").strip()
        num_episodes = int(num_episodes_input) if num_episodes_input else 3
        
        delay_input = input("Delay entre a√ß√µes em segundos (padr√£o: 0.05): ").strip()
        delay = float(delay_input) if delay_input else 0.05
        
        # Confirma√ß√£o
        print(f"\nDemonstrando indiv√≠duo com fitness {individual['fitness']:.2f}")
        print(f"Epis√≥dios: {num_episodes}")
        print(f"Delay: {delay}s")
        
        confirm = input("Continuar? (s/n): ").strip().lower()
        if confirm not in ['s', 'sim', 'y', 'yes']:
            print("Demonstra√ß√£o cancelada.")
            return
        
        # Inicializa jogo para obter as a√ß√µes
        print("Inicializando jogo...")
        game, actions = initialize_game(headless=True)
        game.close()
        
        # Demonstra o indiv√≠duo
        demonstrate_individual(individual, actions, num_episodes, delay)
        
    except (ValueError, KeyboardInterrupt) as e:
        print(f"\n‚ùå Opera√ß√£o cancelada: {e}")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")

if __name__ == "__main__":
    main() 